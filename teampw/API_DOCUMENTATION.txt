API DOCUMENTATION:

login_api {
path: /api/login
method: post
receives: {
	name (имя аккаунта)
	password (пароль аккаунта)
    }

description: входит в аккаунт по имени аккаунта и паролю, который шифруется в md5
и сравнивается со значениями в таблице пользователей. Если успешно то пользователю
дают куки для логина со сроком 2 недели, чтобы каждый раз не входить в аккаунт.
Если не существует такого пользователя, то отправляет соответствующее сообщение
}

verifyemail_api {
path: /api/verifyemail
method: post
receives: {
	name (имя аккаунта)
	email (адрес электронной почты)
	password (пароль аккаунта)
    }

description: Отправка кода подтверждения на почту.
Проверяет имя на разрешенные символы, длину и занятость имени.
Пароль хэширует в md5. Если все хорошо, то генерирует рандомный код для 
подтверждения почты и отправляет на почту. Также создает запись с полученными
данными в таблице неподтвержденных пользователей. Если до этого была запись
в таблице с таким именем, то она удаляется
}

registeraccount_api {
path: /api/registeraccount
method: GET
receives: {
	name (имя аккаунта)
	code (код для подтверждения почты)
    }

description: Регистрирует аккаунт. Находит запись с отправленными данными в таблице с 
неподтвержденными
пользователями. Если она есть, то добавляет  новую запись в таблицу с пользователями, 
копируя значения полей с записи из таблицы с неподтвержденными аккаунтами. Старую
запись удаляет. Также посылает куки сроком 2 недели для входа в аккаунт. Если код
или имя аккаунта неверно, то происходит ошибка сервера.
}

registerteam_api {
path: /api/registerteam
method: post
receives: {
	name (имя аккаунта)
	info (дополнительная информация о команде)
    }

description: Проверяет имя на длину, разрешенные символы, доступность имени и
принадлежность пользователя к любой команде. Если проверка проходит, то удаляется
анкета пользователя, все приглашения к пользователю и запросы от пользователя. Создается
команда в таблице, где владельцем является данный пользователь и запись в принадлежности
пользователя к команде.
}

logout_api {
path: /api/logout
method: GET
receives: -
description: Удаляет куки для входа из браузера и выходит из аккаунта
}

changeuserinfo_api {
path: /api/changeuserinfo
method: post
receives: {
	info (информация о пользователе)
	contacts (контакты пользователя)
	seeks (галочка для анкеты, ищет ли команду или нет)
	project (направление, где хотел бы развиваться)
	role (кем хотел быть в команде)
	skills (навыки пользователя)
    }

description: меняет информацию пользователя, с которого идет запрос.
Также удаляет анкету или добавляет или изменяет информацию в зависимости
от полученных данных
}

changeteaminfo_api {
path /api/changeteaminfo
method: post
receives: {
	info (информация о команде)
	seek (галочка для анкеты, ищет ли участников команды или нет)
	project (в каком направлении команда работает)
	role (кем должны быть потенциальные участники)
	skills (требуемые навыки у потенциальных участников)
    }

description: Изменяет информацию о команде, владельцем которой является
пользователь, с которого идет запрос на адрес. Добавляет, удаляет или изменяет анкету
команды в зависимости от полученных данных
}

invite_api {
path: /api/invite/<name>
method: post
receives: -
description: Отправка приглашения в команду, владельцем которой является текущий
пользователь. Проверяет чтобы пользователь (name), получивший приглашение, не состоял в команде
и что это приглашение не отправлялось этому пользователю (отсутствие дубликатов).
Если этот пользователь, получивший приглашение, уже отправлял запрос на вступление
текущему пользователю, то тот пользователь присоединяется в команду.
Добавится запись в принадлежности команде в таблице. Также его анкета и
все приглашения ему и запросы от него удаляются. Если приглашение отправилось, то оно
появится на странице пользователя в уведомлениях и он решит отклонить или принять
приглашение. Эта запись добавится в таблице с приглашениями
}

request_api {
path: /api/request/<name>
method: post
receives: -
description: Отправление запроса на вступление в команду. Проверяет, чтобы текущий
пользователь не был в команде и не было повторение запросов. Если текущему пользователю
было отправлено приглашение от того пользователя, то текущий пользователь вступает в команду,
владельцем которой является тот пользователь (name). Удаляется анкета, все приглашения и 
запросы текущего пользователя. Добавляется запись в принадлежности пользователя команде
В противном случае отправляется запрос
владельцу на вступление в команду. Оно появится в уведомлениях владельца и он решит
отклонить или принять челвоека. Запись добавится в таблице с запросами на вступление.
}

leave_api {
path: /api/leave
method: post
receives: -
description: текущий пользователь выходит из команды. если это был владелец то его команда
удаляется и все ассоциирующие записи с командой удаляются.
}

kick_api {
path: /api/kick/<name>
method: post
receives: -
description: Выгнать пользователя из команды, владельцем которой является текущий 
пользователь. Проверяется, чтобы нельзя было выгнать самого себя, для этого есть
leave_api. Удаляется запись принадлежности к команде пользователя (name). 
}

declineinvite_api {
path: /api/declineinvite/<name>
method: post
receives: -
description: Отклоняет приглашение от данного владельца команды (name). Запись приглашения
удаляется
}

declinerequest_api {
path: /api/declinerequest/<name>
method: post
receives: -
description: Отклоняет запрос на вступление в команду от пользователя (name). Запись
запроса удаляется.
}
















